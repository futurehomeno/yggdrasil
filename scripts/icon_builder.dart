import 'dart:io';

void main() {
  /// Path to the directory containing the SVG icons.
  const String inputPath = 'assets/icons';

  /// Path to the directory where the generated Dart file will be saved.
  const String outputPath = 'lib/src/icons/icons.dart';

  /// Directory object pointing to the directory containing the SVG icons.
  final Directory directory = Directory(inputPath);

  /// Buffer used to build the contents of the generated Dart file.
  final StringBuffer mainBuffer = StringBuffer()
    ..writeln('/// Class providing names of SVG icons as static const strings.')
    ..writeln('///')
    ..writeln('/// Generated by scripts/icon_builder.dart.')
    ..writeln('class YgIcons {')
    ..writeln('  YgIcons._();')
    ..writeln('');

  /// Buffer used to build the static const strings.
  final StringBuffer allIconsBuffer = StringBuffer();

  /// Buffer used to build the list of icon paths.
  final StringBuffer allIconPathsBuffer = StringBuffer()
    ..writeln('  static const List<String> allIconPaths = <String>[');

  /// Buffer used to build the list of icon names.
  final StringBuffer allIconNames = StringBuffer()..writeln('  static const List<String> allIconNames = <String>[');

  // List of files in the directory.
  final List<FileSystemEntity> files = directory.listSync(recursive: false, followLinks: false);
  for (final FileSystemEntity entity in files) {
    // Only process SVG files.
    if (entity is File && entity.path.endsWith('.svg')) {
      final String fileName = entity.path.split(Platform.pathSeparator).last;
      final String iconName = fileName.split('.').first;
      final String camelCaseIconName = toCamelCase(iconName);
      allIconsBuffer.writeln('  static const String $camelCaseIconName = \'$inputPath/$iconName.svg\';');
      allIconPathsBuffer.writeln('    $camelCaseIconName,');
      allIconNames.writeln('    \'$camelCaseIconName\',');
    }
  }

  // Close the lists.
  allIconPathsBuffer.writeln('  ];');
  allIconNames.writeln('  ];');

  // Write everything to the main buffer.
  mainBuffer.writeln(allIconsBuffer.toString());
  mainBuffer.writeln(allIconPathsBuffer.toString());
  mainBuffer.write(allIconNames.toString());
  mainBuffer.writeln('}');

  // Write the output file.
  final File outputFile = File(outputPath);
  outputFile
    ..createSync(recursive: true)
    ..writeAsStringSync(mainBuffer.toString());
}

/// Converts [text] to camelCase.
///
/// Replaces hyphens and underscores with spaces, then capitalizes the
/// first character of each word (except the first word).
/// Finally, removes the spaces to form a single word.
String toCamelCase(String text) {
  final String normalizedText = text.replaceAll('-', '_');

  return normalizedText.split('_').asMap().entries.map((MapEntry<int, String> entry) {
    if (entry.key == 0) return entry.value;

    return '${entry.value[0].toUpperCase()}${entry.value.substring(1)}';
  }).join();
}
