// ignore_for_file: prefer-static-class

import 'dart:io';

void main() async {
  // Handle potential errors when reading the file
  final String content = await readFile('lib/src/tokens/consumer_light/colors.dart');

  // Extract color names from the content
  final Iterable<String> colorNames = extractColorNames(content);

  // Generate the output content
  final String outputContent = generateOutputContent(colorNames);

  // Write the generated content to the output file
  await writeToFile('lib/src/generated/colors/yg_colors.dart', outputContent);
}

Future<String> readFile(String path) async {
  try {
    final File file = File(path);

    return await file.readAsString();
  } catch (e) {
    // ignore: avoid-throw-in-catch-block
    throw FileSystemException('Error reading the file: $e');
  }
}

Iterable<String> extractColorNames(String content) {
  final Iterable<RegExpMatch> matches = RegExp(r'static const Color (.*?) =', multiLine: true).allMatches(content);

  return matches.map((RegExpMatch match) => match.group(1)!); // Ensure to handle nulls accordingly.
}

String generateOutputContent(Iterable<String> colorNames) {
  final StringBuffer buffer = StringBuffer()
    ..writeln('import \'package:flutter/material.dart\';')
    ..writeln('import \'package:yggdrasil/yggdrasil.dart\';')
    ..writeln('')
    ..writeln('/// Class providing way to get color object from string.')
    ..writeln('///')
    ..writeln('/// Generated by scripts/color_builder.dart.')
    ..writeln('class YgColors {')
    // ... (rest of the static content)
    ..writeln('  static Color? getColorFromString({')
    ..writeln('    required String colorName,')
    ..writeln('    required BuildContext context,')
    ..writeln('  }) {')
    ..writeln('    return switch(colorName) {');

  for (String colorName in colorNames) {
    buffer.writeln('      \'$colorName\' => context.ygTheme.tokens.colors.$colorName,');
  }

  buffer
    ..writeln('      _ => null,')
    ..writeln('    };')
    ..writeln('  }')
    ..writeln('}');

  return buffer.toString();
}

Future<void> writeToFile(String path, String content) async {
  try {
    final File file = File(path);
    await file.writeAsString(content);
  } catch (e) {
    // ignore: avoid-throw-in-catch-block
    throw FileSystemException('Error writing to the file: $e');
  }
}
