// ignore_for_file: prefer-static-class

import 'dart:io';

import 'script_helpers.dart';

void main() {
  const String inputPath = 'assets/icons';
  const String outputPath = 'lib/src/icons/yg_icons.dart';

  final List<String> svgFileNames = getSvgFileNamesFromDirectory(directoryPath: inputPath);
  generateIconFile(svgFileNames: svgFileNames, inputPath: inputPath, outputPath: outputPath);
}

List<String> getSvgFileNamesFromDirectory({required String directoryPath}) {
  final Directory directory = Directory(directoryPath);
  final List<String> svgFileNames = <String>[];

  for (final FileSystemEntity entity in directory.listSync(recursive: false, followLinks: false)) {
    if (entity is File && entity.path.endsWith('.svg')) {
      final String? fileName = entity.path.split(Platform.pathSeparator).lastOrNull;
      if (fileName != null) svgFileNames.add(fileName);
    }
  }

  svgFileNames.sort((String a, String b) => a.compareTo(b));

  return svgFileNames;
}

void generateIconFile({required List<String> svgFileNames, required String inputPath, required String outputPath}) {
  final StringBuffer mainBuffer = StringBuffer()
    ..writeln('/// Class providing names of SVG icons as static const strings.')
    ..writeln('///')
    ..writeln('/// Generated by scripts/icon_builder.dart.')
    ..writeln('class YgIcons {')
    ..writeln('  const YgIcons._();') // Private constructor to prevent instantiation.
    ..writeln('');

  final List<String> iconDeclarations = <String>[];

  mainBuffer.writeln('  static const Map<String, String> allIcons = <String, String>{');

  for (final String fileName in svgFileNames) {
    final String? iconName = fileName.split('.').firstOrNull;
    if (iconName == null) continue;

    final String camelCaseIconName = ScriptHelpers.toCamelCase(iconName);
    iconDeclarations.add('  static const String $camelCaseIconName = \'$inputPath/$iconName.svg\';');
    mainBuffer.writeln('    \'$camelCaseIconName\': $camelCaseIconName,');
  }

  mainBuffer
    ..writeln('  };')
    ..writeln('')
    ..writeln(iconDeclarations.join('\n'))
    ..writeln('}');

  final File outputFile = File(outputPath);
  outputFile
    ..createSync(recursive: true)
    ..writeAsStringSync(mainBuffer.toString());
}
